import { useState, useEffect } from "react";
import { useMutation, useQuery } from "@tanstack/react-query";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import { useLocation } from "wouter";
import Layout from "@/components/layout";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Skeleton } from "@/components/ui/skeleton";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import CreatePost from "@/components/create-post";
import PostCard from "@/components/post-card";
// Removed Progress import as we're using custom progress elements
import { apiRequest, queryClient } from "@/lib/queryClient";
import { 
  BarChart, 
  Building2, 
  Users, 
  Calendar, 
  BriefcaseBusiness, 
  Briefcase,
  CheckCircle2, 
  Clock, 
  FileStack,
  PlusCircle,
  Search,
  Trophy,
  UserCheck
} from "lucide-react";
import { Post, User } from "@shared/schema";

export default function RecruiterDashboard() {
  const { user } = useAuth();
  const { toast } = useToast();
  const [, navigate] = useLocation();
  const [activeTab, setActiveTab] = useState("overview");
  const [content, setContent] = useState("");
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [enhancedPosts, setEnhancedPosts] = useState<any[]>([]);
  
  // Fetch posts for feed
  const { data: posts, isLoading: loadingPosts } = useQuery<Post[]>({
    queryKey: ["/api/posts"],
  });

  // Process posts for feed
  useEffect(() => {
    // Only process posts when they are available
    if (!posts) {
      return;
    }
    
    const fetchPostDetails = async () => {
      const enhanced = await Promise.all(
        posts.map(async (post) => {
          try {
            const [authorRes, likesRes, commentsRes] = await Promise.all([
              fetch(`/api/users/${post.userId}`),
              fetch(`/api/posts/${post.id}/likes`),
              fetch(`/api/posts/${post.id}/comments`)
            ]);
            
            if (!authorRes.ok) {
              console.error(`Error fetching author for post ${post.id}:`, authorRes.status);
              throw new Error(`Failed to fetch author: ${authorRes.status}`);
            }
            
            if (!likesRes.ok) {
              console.error(`Error fetching likes for post ${post.id}:`, likesRes.status);
              throw new Error(`Failed to fetch likes: ${likesRes.status}`);
            }
            
            if (!commentsRes.ok) {
              console.error(`Error fetching comments for post ${post.id}:`, commentsRes.status);
              throw new Error(`Failed to fetch comments: ${commentsRes.status}`);
            }
            
            const author = await authorRes.json();
            const likes = await likesRes.json();
            const comments = await commentsRes.json();
            
            // Check if current user has liked this post
            const isLiked = Array.isArray(likes) && likes.some((like: any) => like.userId === user?.id);
            
            return {
              post,
              author,
              likes: Array.isArray(likes) ? likes.length : 0,
              comments: Array.isArray(comments) ? comments : [],
              isLiked: !!isLiked
            };
          } catch (error) {
            console.error(`Error processing post ${post.id}:`, error);
            // Return a default/fallback post with minimal error impact
            return {
              post,
              author: {
                id: post.userId,
                name: "Unknown User",
                username: "unknown_user",
                title: "User",
                profileImageUrl: null
              },
              likes: 0,
              comments: [],
              isLiked: false
            };
          }
        })
      );
      
      // Sort posts by most recent first
      const sortedPosts = enhanced.sort((a, b) => {
        const dateA = new Date(a.post.createdAt).getTime();
        const dateB = new Date(b.post.createdAt).getTime();
        return dateB - dateA;
      });
      
      setEnhancedPosts(sortedPosts);
    };
    
    fetchPostDetails();
  }, [posts, user?.id, isRefreshing]);

  // Overview stats
  const {
    data: stats,
    isLoading: statsLoading
  } = useQuery({
    queryKey: ["/api/recruiter/stats"],
    queryFn: () => {
      // Fallback to sample data until API is implemented
      return {
        activeJobs: 5,
        totalApplicants: 127,
        shortlistedCandidates: 18,
        interviewsScheduled: 7,
        talentPoolSize: 43,
        viewRate: 78,
        applicantRate: 24,
        conversionRate: 5.2
      };
    }
  });
  
  // Active jobs data
  const {
    data: jobs,
    isLoading: jobsLoading
  } = useQuery({
    queryKey: ["/api/recruiter/jobs"],
    queryFn: () => {
      // Fallback to sample data until API is implemented
      return [
        {
          id: 1,
          title: "Senior Business Analyst",
          company: user?.company || "Your Company",
          location: "Bengaluru, Karnataka",
          applicantCount: 32,
          shortlistedCount: 8,
          status: "active",
          postedDate: "2025-05-01T09:51:15.873Z",
          views: 145
        },
        {
          id: 2,
          title: "Product Manager",
          company: user?.company || "Your Company",
          location: "Delhi, Remote",
          applicantCount: 47,
          shortlistedCount: 5,
          status: "active",
          postedDate: "2025-05-05T09:51:15.873Z",
          views: 203
        },
        {
          id: 3,
          title: "Data Scientist",
          company: user?.company || "Your Company",
          location: "Mumbai, Hybrid",
          applicantCount: 24,
          shortlistedCount: 3,
          status: "active",
          postedDate: "2025-05-07T09:51:15.873Z",
          views: 112
        },
        {
          id: 4,
          title: "UX Designer",
          company: user?.company || "Your Company",
          location: "Remote",
          applicantCount: 19,
          shortlistedCount: 2,
          status: "active",
          postedDate: "2025-05-10T09:51:15.873Z",
          views: 87
        },
        {
          id: 5,
          title: "DevOps Engineer",
          company: user?.company || "Your Company",
          location: "Pune, Maharashtra",
          applicantCount: 5,
          shortlistedCount: 0,
          status: "active",
          postedDate: "2025-05-12T09:51:15.873Z",
          views: 42
        }
      ];
    }
  });
  
  // Top candidates
  const {
    data: topCandidates,
    isLoading: candidatesLoading
  } = useQuery({
    queryKey: ["/api/recruiter/top-candidates"],
    queryFn: () => {
      // Fallback to sample data until API is implemented
      return [
        {
          id: 3,
          name: "Priya Sharma",
          title: "Senior UX Designer",
          matchScore: 92,
          skills: ["User Research", "UX Design", "Figma", "Prototyping", "User Testing"],
          profileImageUrl: "https://randomuser.me/api/portraits/women/79.jpg",
          hasVideo: true
        },
        {
          id: 4,
          name: "Arjun Patel",
          title: "Full Stack Developer",
          matchScore: 89,
          skills: ["React", "Node.js", "TypeScript", "MongoDB", "Docker"],
          profileImageUrl: "https://randomuser.me/api/portraits/men/32.jpg",
          hasVideo: true
        },
        {
          id: 5,
          name: "Divya Reddy",
          title: "Data Scientist",
          matchScore: 85,
          skills: ["Python", "ML", "Data Analysis", "TensorFlow", "Statistical Analysis"],
          profileImageUrl: "https://randomuser.me/api/portraits/women/44.jpg",
          hasVideo: false
        }
      ];
    }
  });
  
  // Upcoming interviews
  const {
    data: interviews,
    isLoading: interviewsLoading
  } = useQuery({
    queryKey: ["/api/recruiter/interviews"],
    queryFn: () => {
      // Fallback to sample data until API is implemented
      return [
        {
          id: 1,
          candidateName: "Arjun Patel",
          jobTitle: "Senior Business Analyst",
          date: "2025-05-18T10:00:00Z",
          type: "Virtual",
          profileImageUrl: "https://randomuser.me/api/portraits/men/32.jpg"
        },
        {
          id: 2,
          candidateName: "Priya Sharma",
          jobTitle: "Product Manager",
          date: "2025-05-19T14:30:00Z",
          type: "In-person",
          profileImageUrl: "https://randomuser.me/api/portraits/women/79.jpg"
        },
        {
          id: 3,
          candidateName: "Raj Kumar",
          jobTitle: "UX Designer",
          date: "2025-05-20T11:00:00Z",
          type: "Virtual",
          profileImageUrl: "https://randomuser.me/api/portraits/men/11.jpg"
        }
      ];
    }
  });
  
  // Function to refresh posts
  const handleRefreshPosts = () => {
    setIsRefreshing(true);
    toast({
      title: "Refreshing posts",
      description: "Getting the most recent posts for you",
    });
    
    // Invalidate posts query to refetch the latest data
    queryClient.invalidateQueries({ queryKey: ["/api/posts"] });
    
    // Simulate loading for better UX
    setTimeout(() => setIsRefreshing(false), 800);
  };

  return (
    <Layout>
      <div className="max-w-6xl mx-auto p-4">
        {/* Welcome banner for recruiters */}
        <div className="welcome-card mb-6 p-6 text-white shadow-lg relative overflow-hidden">
          <div className="md:flex items-center justify-between relative z-10">
            <div>
              <h2 className="text-2xl font-bold mb-2">Welcome to Harmony.ai</h2>
              <p className="opacity-90 max-w-xl">Connect with professionals, showcase your digital CV, and discover opportunities tailored to your skills.</p>
            </div>
            
            <button 
              className="bg-white text-purple-700 font-medium px-5 py-2.5 rounded-full hover:bg-purple-50 transition-colors shadow-md hover:shadow-lg mt-4 md:mt-0"
            >
              Take a Tour
            </button>
          </div>
        </div>
        
        <div className="flex justify-between items-center mb-6">
          <div>
            <h1 className="text-2xl font-semibold text-gray-900">Recruiter Dashboard</h1>
            <p className="text-gray-600">{user?.company || "Your Company"} • {new Date().toLocaleDateString('en-US', { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' })}</p>
          </div>
          <div className="flex gap-2">
            <Button 
              className="bg-white text-purple-600 border border-purple-600 hover:bg-purple-50 rounded-full px-4"
              onClick={() => navigate("/applicant-tracking")}
            >
              <Users className="h-4 w-4 mr-2" />
              Applicants
            </Button>
            <Button 
              className="bg-purple-600 hover:bg-purple-700 rounded-full px-4"
              onClick={() => navigate("/create-job-posting")}
            >
              <PlusCircle className="h-4 w-4 mr-2" />
              Post New Job
            </Button>
          </div>
        </div>
        
        <div className="flex gap-1 border-b border-gray-200 mb-6">
          <button 
            onClick={() => setActiveTab("overview")}
            className={`px-6 py-3 text-sm font-medium ${activeTab === "overview" ? 
              "text-[#8a3ffc] border-b-2 border-[#8a3ffc]" : 
              "text-gray-600 hover:text-[#8a3ffc]"}`}
          >
            Overview
          </button>
          <button 
            onClick={() => setActiveTab("jobs")}
            className={`px-6 py-3 text-sm font-medium ${activeTab === "jobs" ? 
              "text-[#8a3ffc] border-b-2 border-[#8a3ffc]" : 
              "text-gray-600 hover:text-[#8a3ffc]"}`}
          >
            Job Postings
          </button>
          <button 
            onClick={() => setActiveTab("candidates")}
            className={`px-6 py-3 text-sm font-medium ${activeTab === "candidates" ? 
              "text-[#8a3ffc] border-b-2 border-[#8a3ffc]" : 
              "text-gray-600 hover:text-[#8a3ffc]"}`}
          >
            Talent Pool
          </button>
          <button 
            onClick={() => setActiveTab("interviews")}
            className={`px-6 py-3 text-sm font-medium ${activeTab === "interviews" ? 
              "text-[#8a3ffc] border-b-2 border-[#8a3ffc]" : 
              "text-gray-600 hover:text-[#8a3ffc]"}`}
          >
            Interviews
          </button>
        </div>
        
        {/* Tab content container */}
        <div>
          {/* OVERVIEW TAB */}
          {activeTab === "overview" && <div className="space-y-6">
            {/* Feed Section */}
            <div className="grid md:grid-cols-3 gap-6 mb-8">
              <div className="md:col-span-2 space-y-6">
                {/* Create Post */}
                <CreatePost 
                  className="transform transition-all hover:shadow-md" 
                  initialContent={content}
                  onContentChange={setContent}
                />
                
                {/* Posts Feed */}
                {loadingPosts || isRefreshing ? (
                  <div className="space-y-6">
                    <Skeleton className="h-64 w-full" />
                    <Skeleton className="h-64 w-full" />
                  </div>
                ) : (
                  <>
                    {enhancedPosts.map((item) => (
                      <PostCard
                        key={item.post.id}
                        post={item.post}
                        author={item.author}
                        likes={item.likes}
                        comments={item.comments}
                        isLiked={item.isLiked}
                      />
                    ))}
                    {enhancedPosts.length === 0 && (
                      <div className="bg-white shadow rounded-lg p-8 text-center">
                        <p className="text-gray-500">No posts available. Start by creating your first post!</p>
                      </div>
                    )}
                  </>
                )}
              </div>
              
              {/* Right Sidebar - Profile Stats */}
              <div className="space-y-6">
                <Card className="border-0 shadow-md overflow-hidden">
                  <CardContent className="p-4">
                    <h3 className="font-medium text-gray-800 mb-3 flex items-center gap-2">
                      <span className="h-5 w-5 bg-purple-100 rounded-full flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-3 w-3 text-purple-600">
                          <path d="M22 12h-4l-3 9L9 3l-3 9H2" />
                        </svg>
                      </span>
                      Profile Activity
                    </h3>
                    
                    <div className="space-y-4">
                      <div className="flex justify-between items-center">
                        <div className="flex items-center gap-2">
                          <span className="h-7 w-7 bg-gray-100 rounded-full flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-4 w-4 text-gray-600">
                              <path d="M17 18a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2" />
                              <rect width="18" height="18" x="3" y="4" rx="2" />
                              <circle cx="12" cy="10" r="2" />
                              <line x1="8" x2="8" y1="2" y2="4" />
                              <line x1="16" x2="16" y1="2" y2="4" />
                            </svg>
                          </span>
                          <div>
                            <p className="text-sm font-medium text-gray-800">Profile views</p>
                            <p className="text-2xl font-bold">142</p>
                          </div>
                        </div>
                        <span className="text-xs text-green-600 font-medium bg-green-50 px-2 py-1 rounded-full">+12%</span>
                      </div>
                      
                      <div className="flex justify-between items-center">
                        <div className="flex items-center gap-2">
                          <span className="h-7 w-7 bg-gray-100 rounded-full flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-4 w-4 text-gray-600">
                              <circle cx="11" cy="11" r="8" />
                              <path d="m21 21-4.3-4.3" />
                            </svg>
                          </span>
                          <div>
                            <p className="text-sm font-medium text-gray-800">Search appearances</p>
                            <p className="text-2xl font-bold">73</p>
                          </div>
                        </div>
                        <span className="text-xs text-green-600 font-medium bg-green-50 px-2 py-1 rounded-full">+15%</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
            
            {/* Stats Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <Card className="border shadow-sm">
                <CardContent className="pt-6 pb-4">
                  <div className="flex justify-between items-center">
                    <div>
                      <p className="text-sm font-medium text-gray-500">Active Jobs</p>
                      <h3 className="text-2xl font-bold mt-1 text-gray-800">{stats?.activeJobs || 5}</h3>
                    </div>
                    <div className="h-10 w-10 bg-purple-100 rounded-full flex items-center justify-center">
                      <BriefcaseBusiness className="h-5 w-5 text-purple-600" />
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card className="border shadow-sm">
                <CardContent className="pt-6 pb-4">
                  <div className="flex justify-between items-center">
                    <div>
                      <p className="text-sm font-medium text-gray-500">Total Applicants</p>
                      <h3 className="text-2xl font-bold mt-1 text-gray-800">{stats?.totalApplicants || 127}</h3>
                    </div>
                    <div className="h-10 w-10 bg-purple-100 rounded-full flex items-center justify-center">
                      <Users className="h-5 w-5 text-purple-600" />
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card className="border shadow-sm">
                <CardContent className="pt-6 pb-4">
                  <div className="flex justify-between items-center">
                    <div>
                      <p className="text-sm font-medium text-gray-500">Shortlisted</p>
                      <h3 className="text-2xl font-bold mt-1 text-gray-800">{stats?.shortlistedCandidates || 18}</h3>
                    </div>
                    <div className="h-10 w-10 bg-purple-100 rounded-full flex items-center justify-center">
                      <CheckCircle2 className="h-5 w-5 text-purple-600" />
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card className="border shadow-sm">
                <CardContent className="pt-6 pb-4">
                  <div className="flex justify-between items-center">
                    <div>
                      <p className="text-sm font-medium text-gray-500">Interviews</p>
                      <h3 className="text-2xl font-bold mt-1 text-gray-800">{stats?.interviewsScheduled || 7}</h3>
                    </div>
                    <div className="h-10 w-10 bg-purple-100 rounded-full flex items-center justify-center">
                      <Calendar className="h-5 w-5 text-purple-600" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
            
            {/* Recent Activity and Metrics */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <div className="lg:col-span-2">
                <Card className="border shadow-sm">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg">Recent Job Performance</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      {jobs?.slice(0, 3).map((job) => (
                        <div key={job.id} className="border-b pb-4 last:border-0 last:pb-0">
                          <div className="flex justify-between items-start mb-2">
                            <div>
                              <h4 className="font-medium">{job.title}</h4>
                              <p className="text-sm text-gray-500">{job.location}</p>
                            </div>
                            <Badge className={`px-2 py-1 ${job.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}>
                              {job.status === 'active' ? 'Active' : 'Paused'}
                            </Badge>
                          </div>
                          
                          <div className="grid grid-cols-3 gap-4 mt-3">
                            <div>
                              <p className="text-xs text-gray-500">Views</p>
                              <p className="font-medium">{job.views}</p>
                            </div>
                            <div>
                              <p className="text-xs text-gray-500">Applicants</p>
                              <p className="font-medium">{job.applicantCount}</p>
                            </div>
                            <div>
                              <p className="text-xs text-gray-500">Shortlisted</p>
                              <p className="font-medium">{job.shortlistedCount}</p>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>
              
              <div>
                <Card className="border shadow-sm">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg">Key Metrics</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      <div>
                        <div className="flex justify-between mb-1">
                          <p className="text-sm">View Rate</p>
                          <p className="text-sm font-medium">{stats?.viewRate || 78}%</p>
                        </div>
                        <div className="relative h-2 w-full overflow-hidden rounded-full bg-gray-100">
                          <div 
                            className="h-full w-full flex-1 bg-purple-500 transition-all"
                            style={{ transform: `translateX(-${100 - (stats?.viewRate || 78)}%)` }}
                          />
                        </div>
                      </div>
                      
                      <div>
                        <div className="flex justify-between mb-1">
                          <p className="text-sm">Application Rate</p>
                          <p className="text-sm font-medium">{stats?.applicantRate || 24}%</p>
                        </div>
                        <div className="relative h-2 w-full overflow-hidden rounded-full bg-gray-100">
                          <div 
                            className="h-full w-full flex-1 bg-purple-500 transition-all"
                            style={{ transform: `translateX(-${100 - (stats?.applicantRate || 24)}%)` }}
                          />
                        </div>
                      </div>
                      
                      <div>
                        <div className="flex justify-between mb-1">
                          <p className="text-sm">Conversion Rate</p>
                          <p className="text-sm font-medium">{stats?.conversionRate || 5.2}%</p>
                        </div>
                        <div className="relative h-2 w-full overflow-hidden rounded-full bg-gray-100">
                          <div 
                            className="h-full w-full flex-1 bg-purple-500 transition-all"
                            style={{ transform: `translateX(-${100 - (stats?.conversionRate || 5.2)}%)` }}
                          />
                        </div>
                      </div>
                      
                      <div className="pt-4 border-t">
                        <p className="font-medium mb-2">Talent Pool</p>
                        <div className="flex items-center gap-2">
                          <div className="h-5 w-5 rounded-full bg-purple-100 flex items-center justify-center">
                            <FileStack className="h-3 w-3 text-purple-600" />
                          </div>
                          <span>{stats?.talentPoolSize || 43} potential candidates</span>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
            
            {/* Top Candidates and Upcoming Interviews */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Top Candidates */}
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Top Matching Candidates</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {topCandidates?.map((candidate) => (
                      <div key={candidate.id} className="flex items-center justify-between border-b pb-4 last:border-0 last:pb-0">
                        <div className="flex items-center gap-3">
                          <div className="relative">
                            <img 
                              src={candidate.profileImageUrl} 
                              alt={candidate.name}
                              className="h-10 w-10 rounded-full object-cover"
                            />
                            {candidate.hasVideo && (
                              <div className="absolute -bottom-1 -right-1 bg-purple-600 rounded-full h-4 w-4 flex items-center justify-center">
                                <span className="text-white text-[8px]">CV</span>
                              </div>
                            )}
                          </div>
                          <div>
                            <h4 className="font-medium leading-tight">{candidate.name}</h4>
                            <p className="text-sm text-gray-500">{candidate.title}</p>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <div className="text-right mr-3">
                            <div className="font-medium text-green-600">{candidate.matchScore}%</div>
                            <div className="text-xs text-gray-500">Match</div>
                          </div>
                          <Button variant="ghost" size="icon" className="h-8 w-8">
                            <UserCheck className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
              
              {/* Upcoming Interviews */}
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Upcoming Interviews</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {interviews?.map((interview) => (
                      <div key={interview.id} className="flex items-start gap-3 border-b pb-4 last:border-0 last:pb-0">
                        <div className="h-10 w-10 rounded-full overflow-hidden flex-shrink-0">
                          <img 
                            src={interview.profileImageUrl} 
                            alt={interview.candidateName}
                            className="h-full w-full object-cover"
                          />
                        </div>
                        <div className="flex-1">
                          <h4 className="font-medium">{interview.candidateName}</h4>
                          <p className="text-sm text-gray-500">{interview.jobTitle}</p>
                          <div className="flex items-center mt-1 text-sm">
                            <Calendar className="h-3 w-3 mr-1 text-primary" />
                            <span className="mr-2">
                              {new Date(interview.date).toLocaleDateString()}
                            </span>
                            <Clock className="h-3 w-3 mr-1 text-primary" />
                            <span>
                              {new Date(interview.date).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                            </span>
                          </div>
                        </div>
                        <Badge variant="outline" className="bg-primary/5 border-primary/20">
                          {interview.type}
                        </Badge>
                      </div>
                    ))}
                    
                    {(!interviews || interviews.length === 0) && (
                      <div className="text-center py-6 text-gray-500">
                        No upcoming interviews scheduled
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
          
          {/* JOBS TAB */}
          <TabsContent value="jobs" className="space-y-6">
            <Card>
              <CardContent className="pt-6">
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-xl font-semibold">Job Postings</h2>
                  <div className="flex items-center gap-2">
                    <div className="relative">
                      <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
                      <Input className="pl-8 w-[250px]" placeholder="Search job postings..." />
                    </div>
                    <Button className="bg-primary hover:bg-primary/90">
                      <PlusCircle className="h-4 w-4 mr-2" />
                      Post New Job
                    </Button>
                  </div>
                </div>
                
                <div className="space-y-4">
                  {jobs?.map((job) => (
                    <Card key={job.id} className="overflow-hidden">
                      <CardContent className="p-0">
                        <div className="grid grid-cols-1 md:grid-cols-5 divide-y md:divide-y-0 md:divide-x">
                          <div className="p-4 md:col-span-2">
                            <div className="flex justify-between">
                              <div>
                                <h3 className="font-medium text-lg">{job.title}</h3>
                                <p className="text-gray-600">{job.company}</p>
                                <p className="text-gray-600 text-sm">{job.location}</p>
                              </div>
                              <Badge 
                                className={
                                  job.status === "active" ? "bg-green-100 text-green-800" :
                                  job.status === "paused" ? "bg-yellow-100 text-yellow-800" :
                                  job.status === "draft" ? "bg-gray-100 text-gray-800" :
                                  job.status === "closed" ? "bg-red-100 text-red-800" :
                                  ""
                                }
                              >
                                {job.status.charAt(0).toUpperCase() + job.status.slice(1)}
                              </Badge>
                            </div>
                            <div className="mt-2 text-sm text-gray-500">
                              Posted: {new Date(job.postedDate).toLocaleDateString()}
                            </div>
                          </div>
                          
                          <div className="p-4 grid grid-cols-3 md:col-span-2">
                            <div className="text-center">
                              <p className="text-2xl font-semibold">{job.views}</p>
                              <p className="text-sm text-gray-500">Views</p>
                            </div>
                            <div className="text-center">
                              <p className="text-2xl font-semibold">{job.applicantCount}</p>
                              <p className="text-sm text-gray-500">Applicants</p>
                            </div>
                            <div className="text-center">
                              <p className="text-2xl font-semibold">{job.shortlistedCount}</p>
                              <p className="text-sm text-gray-500">Shortlisted</p>
                            </div>
                          </div>
                          
                          <div className="p-4 flex flex-wrap gap-2 items-center justify-center md:col-span-1">
                            <Button variant="outline" size="sm">View</Button>
                            <Button variant="outline" size="sm">Edit</Button>
                            <Button variant="ghost" size="sm">
                              {job.status === "active" ? "Pause" : "Activate"}
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          {/* CANDIDATES TAB */}
          <TabsContent value="candidates" className="space-y-6">
            <Card>
              <CardContent className="pt-6">
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-xl font-semibold">Talent Pool</h2>
                  <div className="flex items-center gap-2">
                    <div className="relative">
                      <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
                      <Input className="pl-8 w-[250px]" placeholder="Search candidates..." />
                    </div>
                    <Button variant="outline">
                      <span>Filter</span>
                    </Button>
                  </div>
                </div>
                
                <div className="space-y-4">
                  {[...topCandidates || [], ...(topCandidates || [])].map((candidate, index) => (
                    <Card key={`${candidate.id}-${index}`} className="overflow-hidden">
                      <CardContent className="p-0">
                        <div className="grid grid-cols-1 md:grid-cols-7 divide-y md:divide-y-0 md:divide-x">
                          <div className="p-4 md:col-span-2">
                            <div className="flex items-start gap-3">
                              <div className="relative">
                                <img 
                                  src={candidate.profileImageUrl} 
                                  alt={candidate.name}
                                  className="h-12 w-12 rounded-full object-cover"
                                />
                                {candidate.hasVideo && (
                                  <div className="absolute -bottom-1 -right-1 bg-purple-600 rounded-full h-5 w-5 flex items-center justify-center">
                                    <span className="text-white text-[10px]">CV</span>
                                  </div>
                                )}
                              </div>
                              <div>
                                <h3 className="font-medium">{candidate.name}</h3>
                                <p className="text-gray-600 text-sm">{candidate.title}</p>
                                <div className="mt-1 flex items-center">
                                  <Trophy className="h-3 w-3 text-amber-500 mr-1" />
                                  <span className="text-xs font-medium text-amber-500">Top Candidate</span>
                                </div>
                              </div>
                            </div>
                          </div>
                          
                          <div className="p-4 flex items-center md:col-span-3">
                            <div className="flex flex-wrap gap-1">
                              {candidate.skills.map((skill, i) => (
                                <Badge key={i} variant="outline" className="bg-gray-50">
                                  {skill}
                                </Badge>
                              ))}
                            </div>
                          </div>
                          
                          <div className="p-4 md:col-span-1 flex items-center justify-center">
                            <div className="text-center">
                              <div className="text-xl font-semibold text-green-600">{candidate.matchScore}%</div>
                              <div className="text-xs text-gray-500">Match Score</div>
                            </div>
                          </div>
                          
                          <div className="p-4 flex items-center justify-center gap-2 md:col-span-1">
                            <Button variant="outline" size="sm">View CV</Button>
                            <Button size="sm">Contact</Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          {/* INTERVIEWS TAB */}
          <TabsContent value="interviews" className="space-y-6">
            <Card>
              <CardContent className="pt-6">
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-xl font-semibold">Interview Schedule</h2>
                  <Button className="bg-primary hover:bg-primary/90">
                    <Calendar className="h-4 w-4 mr-2" />
                    Schedule Interview
                  </Button>
                </div>
                
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-medium mb-4">Upcoming Interviews</h3>
                    {interviews?.length ? (
                      <div className="space-y-4">
                        {interviews.map((interview) => (
                          <Card key={interview.id}>
                            <CardContent className="p-4">
                              <div className="flex items-start gap-4">
                                <div className="h-12 w-12 rounded-full overflow-hidden flex-shrink-0">
                                  <img 
                                    src={interview.profileImageUrl} 
                                    alt={interview.candidateName}
                                    className="h-full w-full object-cover"
                                  />
                                </div>
                                <div className="flex-1">
                                  <div className="flex justify-between items-start">
                                    <div>
                                      <h4 className="font-medium">{interview.candidateName}</h4>
                                      <p className="text-sm text-gray-600">{interview.jobTitle}</p>
                                    </div>
                                    <Badge 
                                      className={
                                        interview.type === "Virtual" ? "bg-blue-100 text-blue-800" : "bg-green-100 text-green-800"
                                      }
                                    >
                                      {interview.type}
                                    </Badge>
                                  </div>
                                  
                                  <div className="mt-3 grid grid-cols-2 gap-2">
                                    <div className="flex items-center text-sm">
                                      <Calendar className="h-4 w-4 mr-2 text-gray-500" />
                                      {new Date(interview.date).toLocaleDateString('en-US', { weekday: 'long', month: 'short', day: 'numeric' })}
                                    </div>
                                    <div className="flex items-center text-sm">
                                      <Clock className="h-4 w-4 mr-2 text-gray-500" />
                                      {new Date(interview.date).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                                    </div>
                                  </div>
                                  
                                  <div className="mt-4 flex gap-2">
                                    <Button variant="outline" size="sm">View Profile</Button>
                                    <Button variant="outline" size="sm">Reschedule</Button>
                                    <Button size="sm">Join Meeting</Button>
                                  </div>
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-6 text-gray-500 border rounded-lg">
                        No upcoming interviews scheduled
                      </div>
                    )}
                  </div>
                  
                  <div>
                    <h3 className="text-lg font-medium mb-4">Past Interviews</h3>
                    <div className="text-center py-6 text-gray-500 border rounded-lg">
                      No past interviews to show
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </Layout>
  );
}